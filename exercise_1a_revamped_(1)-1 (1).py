# -*- coding: utf-8 -*-
"""Exercise_1A_revamped (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OaUWkrezv39radM_Xtu_SLLVm-RHFLsP
"""

# Commented out IPython magic to ensure Python compatibility.
#Import Python Packages
#from google.colab import drive
#drive.mount('/content/drive/')

from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

#Import all necessary librabry

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
from sklearn import tree
from sklearn.metrics import roc_auc_score
import os

#Read training data file
trainfile = r'/content/Santander Customer Satisfaction - TRAIN.csv'
trainData = pd.read_csv(trainfile)

#Read test data file
testfile = r'/content/Santander Customer Satisfaction - TEST-Without TARGET.csv'
testData = pd.read_csv(testfile)

trainData.head()
#print("=======")
testData.head()

print(trainData.shape)      # To get (Number of Rows, Number of Columns) of a data frame we use DataFrame.shape
print(testData.shape)

#Understanding the Columns

trainData.info()
print()
testData.info()

# To check number of null values
trainData.isna().sum()

# To check basic statistics of a data set, column wise
trainData.describe()

#To get list of names of all Columns from a dataframe

TrainCols = list(trainData.columns.values)
TestCols = list(testData.columns.values)
print(TrainCols)
print(TestCols)

# Seperate Target column from Train Data
Xtrain = trainData[TrainCols[0:len(TrainCols)-1]].copy()
Ytrain = trainData[['TARGET']].copy()
print(Xtrain.shape)
print(Ytrain.shape)
Xtest = testData
print(Xtest.shape)

print(testData.columns)

trainData.boxplot()

trainData.hist()

"""Model 1"""

dt = DecisionTreeClassifier(criterion="entropy", max_depth = 7, max_leaf_nodes = 30, max_features = 350)
# Split dataset
X_train, X_test, Y_train, Y_test = train_test_split(Xtrain, Ytrain, test_size = .20, random_state = 1)
# Fit model on new Train Dataset
dt = dt.fit(X_train, Y_train)
#Predict the responce on new Test Dataset
Y_PredNew = dt.predict(X_test)
# print(Y_PredNew)
Y_Pred = pd.DataFrame(Y_PredNew,  columns=['TARGET'])
print (Y_Pred)
# Y_Pred.to_csv("/gdrive/MyDrive/ML/Y_Dataset1_Predictions_1.csv", index = None)
#Model Accuracy
print("Accuracy:", metrics.accuracy_score(Y_test,Y_PredNew))
#Model Precision
print("Precision:", metrics.precision_score(Y_test,Y_PredNew))

test_id = testData['ID']
model_1_output = dt.predict_proba(testData)
model_1_output = pd.DataFrame(model_1_output[:,1],columns=['TARGET'])
model_1_result = pd.concat([test_id,model_1_output],axis=1)
print(model_1_result)
model_1_result.to_csv('/gdrive/MyDrive/ML/Y_Dataset1_Predictions_1.csv',index=None)

from sklearn.metrics import roc_auc_score
roc_auc_score(Y_test, dt.predict_proba(X_test)[:,1])

# Actual VS Predicted Matrix and TP,FP,TN,FN evaluation
print(metrics.confusion_matrix(Y_test, Y_PredNew))
print()
print('Printing the precision and recall, among other metrics')
print(metrics.classification_report(Y_test, Y_PredNew))

dt.get_params()

#Plotting the decesion Tree
tree.plot_tree(dt)

"""Model 2"""

dt = DecisionTreeClassifier(criterion="entropy", max_depth = 8, max_leaf_nodes = 50, max_features = 390)
# Split dataset
X_train, X_test, Y_train, Y_test = train_test_split(Xtrain, Ytrain, test_size = .30, random_state = 2)
# Fit model on new Train Dataset
dt = dt.fit(X_train, Y_train)
#Predict the responce on new Test Dataset
Y_PredNew = dt.predict(X_test)
# print(Y_PredNew)
Y_Pred = pd.DataFrame(Y_PredNew,  columns=['TARGET'])
print (Y_Pred)
# Y_Pred.to_csv("/gdrive/MyDrive/ML/Y_Dataset1_Predictions_2.csv", index = None)
#Model Accuracy
print("Accuracy:", metrics.accuracy_score(Y_test,Y_PredNew))
#Model Precision
print("Precision:", metrics.precision_score(Y_test,Y_PredNew))

test_id = testData['ID']
model_1_output = dt.predict_proba(testData)
model_1_output = pd.DataFrame(model_1_output[:,1],columns=['TARGET'])
model_1_result = pd.concat([test_id,model_1_output],axis=1)
print(model_1_result)
model_1_result.to_csv('/gdrive/MyDrive/ML/Y_Dataset1_Predictions_2.csv',index=None)

from sklearn.metrics import roc_auc_score
roc_auc_score(Y_test, dt.predict_proba(X_test)[:,1])

dt.get_params()

# Actual VS Predicted Matrix and TP,FP,TN,FN evaluation
print(metrics.confusion_matrix(Y_test, Y_PredNew))
print()
print('Printing the precision and recall, among other metrics')
print(metrics.classification_report(Y_test, Y_PredNew))

#Plotting the decesion Tree
tree.plot_tree(dt)

"""Model 3"""

dt = DecisionTreeClassifier(criterion="entropy", max_depth = 5, max_leaf_nodes = 50, max_features = 500)
# Split dataset
X_train, X_test, Y_train, Y_test = train_test_split(Xtrain, Ytrain, test_size = .20, random_state = 1)
# Fit model on new Train Dataset
dt = dt.fit(X_train, Y_train)
#Predict the responce on new Test Dataset
Y_PredNew = dt.predict(X_test)
# print(Y_PredNew)
Y_Pred = pd.DataFrame(Y_PredNew,  columns=['TARGET'])
print (Y_Pred)
# Y_Pred.to_csv("/gdrive/MyDrive/ML/Y_Dataset1_Predictions_3.csv", index = None)
#Model Accuracy
print("Accuracy:", metrics.accuracy_score(Y_test,Y_PredNew))
#Model Precision
print("Precision:", metrics.precision_score(Y_test,Y_PredNew))

test_id = testData['ID']
model_1_output = dt.predict_proba(testData)
model_1_output = pd.DataFrame(model_1_output[:,1],columns=['TARGET'])
model_1_result = pd.concat([test_id,model_1_output],axis=1)
print(model_1_result)
model_1_result.to_csv('/gdrive/MyDrive/ML/Y_Dataset1_Predictions_3.csv',index=None)

from sklearn.metrics import roc_auc_score
roc_auc_score(Y_test, dt.predict_proba(X_test)[:,1])

dt.get_params()

# Actual VS Predicted Matrix and TP,FP,TN,FN evaluation
print(metrics.confusion_matrix(Y_test, Y_PredNew))
print()
print('Printing the precision and recall, among other metrics')
print(metrics.classification_report(Y_test, Y_PredNew))

#Plotting the decesion Tree
tree.plot_tree(dt)

